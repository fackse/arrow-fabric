syntax = "proto3";
option java_multiple_files = true;
package org.example.ArrowFabric;

enum Code {
  UNKNOWN = 0;
  OK = 1;
  ERROR = 2;
  ERROR_VECTOR_NOT_FOUND = 3;
  ERROR_VECTOR_ALREADY_EXISTENT = 4;
  ERROR_SERVER_MEMORY_EXHAUSTED = 5;
}

enum OP {
  OP_READ = 0;
  OP_WRITE = 1;
  OP_DELETE = 2;
}
message ServerStatus{
  Code code = 1;
  string message = 2;
  ServerInfo server_info = 3;
}

message Empty {
}

message GetServer {
  string type = 1;
  string name = 2;
  OP op = 3;
  int64 size = 4;
  int64 length = 5;
}

message CreateVector {
  string name = 1;
  string type = 2;
}

message SetVector {
  string name = 1;
  bytes data = 2;
  string type = 3;
}

message GetVector {
  string name = 1;
  string type = 2;
}

message Vector {
  string type = 1;
  bytes data = 2;
  ServerStatus status = 3;
}

message VectorInfo {
  string name = 1;
  string type = 2;
  int64 size = 3;
  int64 numElements = 4;
  string location = 5;
}

message ServerInfo {
  string address = 1;
  int32 port = 2;
  int64 id = 3;
  int64 limit = 4;
  int64 allocatedMemory = 5;
  int64 headroom = 6;
  int64 num_vectors = 7;
  ServerStatus status = 8;
}

service VectorService{
  rpc createVector(CreateVector) returns (ServerStatus);
  rpc setVector(stream SetVector) returns (ServerStatus);
  rpc getVector(GetVector) returns (stream SetVector);
  rpc deleteVector(GetVector) returns (ServerStatus);
}

service DispatcherService{
  rpc getServer(GetServer) returns (ServerInfo);
  rpc registerServer(ServerInfo) returns (ServerStatus);
  rpc getServers(Empty) returns (stream ServerInfo);
  rpc getVectors(Empty) returns (stream VectorInfo);
}

service HeartbeatService{
  rpc ping(Empty) returns (ServerStatus);
}